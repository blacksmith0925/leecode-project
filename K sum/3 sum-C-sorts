#include <stdio.h>
#include <malloc.h>
/*
 *采用先排序然后利用2sum的思路，排序的时间复杂度是O(n2)，
 * 对数组进行一次遍历，3sum问题就变成对于每个nums[i],求两数之和为target-nums[i]的2sum问题
 *2sum问题的双指针搜索解法的时间复杂度是O（n），所以乘以一次遍历的总的时间复杂度为O（n2）
 * 整个程序的时间复杂度就是O（n2）*/

 /*在本方法中，由于进行了排序，所以不适合返回原位置的情况。*/

int** threeSum(int* nums, int numsSize, int* returnSize) {

    /*选择排序*/
    int i,m,temp,sum2,sum;
    for(i =0;i<numsSize-1;i++){
        for(m=i+1;m<numsSize;m++){
            if(nums[m]<nums[i]){
                temp = nums[i];
                nums[i] = nums[m];
                nums[m] = temp;
            }
        }
    }
    for(i=0;i<numsSize;i++){
        printf("%d ",nums[i]);
    }


    int **p = (int**)malloc(sizeof(int*));/*实际上这里应该指明行数，但是由于行数提前不知道，所以这里没有写，在leetcode中是非法的，但是在CLion中是可以正常运行的*/
    /*双指针搜索*/
    for(i=0;i<numsSize-2;i++){
        if(nums[i]>0){
            break;
        }
        if(i!=0){
            if(nums[i]!=nums[i-1]){
                sum2 = 0 - nums[i];
            }else{
                continue;
            }
        }else{
            sum2 = 0 - nums[i];
        }

        int j = i+1;
        int k = numsSize-1;
        while(j < k){
            sum = nums[j]+nums[k];
            if(sum == sum2){
                p[*returnSize] = (int*)malloc(sizeof(int)*3);
                p[*returnSize][0] = nums[i];
                p[*returnSize][1] = nums[j];
                p[*returnSize][2] = nums[k];
                *returnSize += 1;
                while(nums[j+1]==nums[j]){
                    j++;
                }
                while(nums[k+1]==nums[k]){
                    k--;
                }
                ++j;
                --k;
                continue;
            }
            else if(sum<sum2){
                ++j;
            }
            else{
                --k;
            }
        }
    }
    return p;/*返回值为一个指向二维数组的二级指针*/
}

int main(){

    int nums[5] = {-2,0,0,2,2};
    int numsSize = 5,returnSize=0;
    int** pa =  threeSum(nums, numsSize, &returnSize);
    printf("\n\n%d\n",returnSize);
    for(int i=0;i<returnSize;i++){
        printf("%d %d %d\n",pa[i][0],pa[i][1],pa[i][2]);
    }

    free(pa);
}

